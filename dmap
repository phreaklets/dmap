#!/usr/bin/env python
# -*- coding: utf-8 -*-

# d(dramallama)map - a minimalist network scanner - (C) 2015 phreaklets

# must run as root for access to privileged functions (raw packets)

# TODO

"""D(dramallama)map

Usage:
  dmap <iprange>
  dmap [-a] [-s] ([-p]|[-t]) [-i <iface>|--interface=<iface>] <iprange>

Options:
  -h, --help     Show this screen.
  -v, --version  Show version.
  -a, --arp      Perform ARP sweep.
  -s, --scan     Perform port scan.
  -p, --ping     Perform ICMP ping sweep.
  -t, --tcping   Perform TCP ping sweep.
  -i <iface>, --interface=<iface>      Choose interface for scanning  [default: eth0].
  -st <type>, --scan-type=<type>  Set type of port scan  [default: top].

"""
from multiprocessing import Pool
from docopt import docopt
import netifaces as ni
import pprint
import sys
from netaddr import IPNetwork, IPAddress
from clint.textui import progress
import logging
# turn off those irritating IPv6 warning messages
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import sr,srp,Ether,ARP,IP,ICMP,TCP,sr1,RandShort,conf #Import needed modules from scapy

interface = None

def coroutine(func):
    def start(*args,**kwargs):
        cr = func(*args,**kwargs)
        cr.next()
        return cr
    return start

def arpsweep_multiprocessing(ip):
    ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst = str(ip)), timeout = 0.1,iface=interface,inter=0.1)
    for snd,rcv in ans:
        mac = rcv.sprintf(r"%Ether.src%")
        ip = rcv.sprintf(r"%ARP.psrc%")

        if mac is not None and ip is not None:
            return ([mac, ip])
    return None

@coroutine
def arpsweep_netrange(target):
    while True:
        netr = (yield)
        print "Starting ARP sweep"
        p = Pool(8)

        try:
            temp_results = (p.map(arpsweep_multiprocessing, list(netr)))
        except KeyboardInterrupt:
            sys.exit()
            p.terminate()
            p.join()
        p.close()
        p.join()

        results = filter(None, temp_results)

        for result in results:
            print "MAC: %s IP: %s" % (result[0],result[1])

        if target is not None:
            netr_results = [IPAddress(x[1]) for x in results]
            target.send(netr_results)

@coroutine
def arpsweep_address(target):
    while True:
        netr = (yield)
        print "Starting ARP sweep"
        results = []
        for i in progress.bar(range(1)):
            ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst = str(netr)), timeout=0.1,iface=interface,inter=0.1)
            for snd,rcv in ans:
                mac = rcv.sprintf(r"%Ether.src%")
                ip = rcv.sprintf(r"%ARP.psrc%")
                results.append([mac, ip])
        for result in results:
            print "MAC: %s IP: %s" % (result[0],result[1])

        if target is not None:
            netr_results = [IPAddress(x[1]) for x in results]
            target.send(netr_results)

@coroutine
def pingsweep(target):
    while True:
        ips = (yield)
        print "Starting ICMP Ping sweep"
        results = []
        for i in progress.bar(range(len(ips))):
            ip = ips[i]
            ans,unans=sr(IP(dst=str(ip))/ICMP(),timeout=0.1,inter=0.1)
            for snd,rcv in ans:
                if (IPAddress(rcv.sprintf("%IP.src%")).is_unicast()):
                    results.append(rcv.sprintf("%IP.src%"))
        for result in results:
            print "Live IP: %s" % (result)

        if target is not None:
            netr_results = [IPAddress(x) for x in results]
            target.send(netr_results)


@coroutine
def tcpsweep(target):
    while True:
        ips = (yield)
        print "Starting TCP Ping sweep"
        results = []
        for i in progress.bar(range(len(ips))):
            ip = ips[i]
            ans,unans=sr( IP(dst=str(ip))/TCP(dport=80,flags="S"),timeout=0.1,inter=0.1)
            for snd,rcv in ans:
                if (IPAddress(rcv.sprintf("%IP.src%")).is_unicast()):
                    results.append(rcv.sprintf("%IP.src%"))
        for result in results:
            print "Live IP: %s" % (result)

        if target is not None:
            netr_results = [IPAddress(x) for x in results]
            target.send(netr_results)

@coroutine
def synscan():
    #ports = "7,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,990,993,995,1025,1026,1027,1028,1029,1110,1433,1720,1723,1755,1900,2000,2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,32768,49152,49153,49154,49155,49156,49157"
    ports = "21,22,23,80,139,443,445"
    port_list = ports.split(",")

    while True:
        ips = (yield)
        print "Starting TCP SYN port scan"
        all_ips_ports = {}
        for i in progress.bar(range(len(ips))):
            dst_ip = ips[i]
            for dst_port in port_list:
                src_port = RandShort()
                stealth_scan_resp = sr1(IP(dst=str(dst_ip))/TCP(sport=src_port,dport=int(dst_port),flags="S"),timeout=1)
                if(str(type(stealth_scan_resp))=="<type 'NoneType'>"):
                    pass
                elif(stealth_scan_resp.haslayer(TCP)):
                    if(stealth_scan_resp.getlayer(TCP).flags == 0x12):
                        tmp_ip_address = (stealth_scan_resp.sprintf("%IP.src%"))
                        if (IPAddress(tmp_ip_address).is_unicast()):
                            if tmp_ip_address in all_ips_ports:
                                tmp_all_ips_ports = all_ips_ports[tmp_ip_address]
                                tmp_all_ips_ports.append(int(dst_port))
                            else:
                                tmp_list = []
                                tmp_list.append([tmp_ip_address, [int(dst_port)]])
                                all_ips_ports.update(tmp_list)
                    elif (stealth_scan_resp.getlayer(TCP).flags == 0x14):
                        pass
                elif(stealth_scan_resp.haslayer(ICMP)):
                    if(int(stealth_scan_resp.getlayer(ICMP).type)==3 and int(stealth_scan_resp.getlayer(ICMP).code) in [1,2,3,9,10,13]):
                        pass
        pprint.pprint(all_ips_ports)

def scan(netr, target):
    target.send(netr)

def main(argv):
    global interface 
    ips = None
    target_ips = None
    is_netrange = True
    is_arpsweep = None
    is_pingsweep = None
    is_tcpsweep = None
    is_synscan = None
    netrange_in_localrange = None
    arguments = docopt(__doc__, version='D(dramallama)map 0.1')
    #print(arguments)

    if arguments['--interface'] is not None:
        interface = arguments['--interface']
    elif arguments['-i'] is not None:
        interface = arguments['-i']

    if arguments['<iprange>'] is not None:
        ips = arguments['<iprange>']
        try:
            target_ips = IPAddress(ips)
            is_netrange = False
            #print "IP addr"
        except ValueError:
            target_ips = IPNetwork(ips)
            is_netrange = True
            #print "network range"

    if is_netrange:    
        local_netrange = IPNetwork(ni.ifaddresses(interface)[2][0]['addr'])
        if local_netrange in target_ips:
            netrange_in_localrange = True
        else:
            netrange_in_localrange = False

    conf.verb = 0

    if arguments['--arp']:
        is_arpsweep = True
    else:
        is_arpsweep = False

    if is_arpsweep and is_netrange and not netrange_in_localrange:
        print "ARP Sweep specified but net range is not in the local range, exiting"
        sys.exit()

    if arguments['--ping'] is True:
        is_pingsweep = True
    else:
        is_pingsweep = False

    if arguments['--tcping'] is True:
        is_tcpsweep = True
    else:
        is_tcpsweep = False

    if arguments['--scan'] is True:
        is_synscan = True
    else:
        is_synscan = False

    # ARP scan of a netrange
    if is_netrange and is_arpsweep:
        if is_pingsweep:
            if is_synscan:
                try:
                    scan(target_ips, arpsweep_netrange(pingsweep(synscan())))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, arpsweep_netrange(pingsweep(None)))
                except KeyboardInterrupt:
                    sys.exit()
        elif is_tcpsweep:
            if is_synscan:
                try:
                    scan(target_ips, arpsweep_netrange(tcpsweep(synscan())))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, arpsweep_netrange(tcpsweep(None)))
                except KeyboardInterrupt:
                    sys.exit()
        else:
            if is_synscan:
                try:
                    scan(target_ips, arpsweep_netrange(synscan()))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, arpsweep_netrange(None))
                except KeyboardInterrupt:
                    sys.exit()
    # ARP scan of an address
    elif not is_netrange and is_arpsweep:
        if is_pingsweep:
            if is_synscan:
                try:
                    scan(target_ips, arpsweep_address(pingsweep(synscan())))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, arpsweep_address(pingsweep(None)))
                except KeyboardInterrupt:
                    sys.exit()
        elif is_tcpsweep:
            if is_synscan:
                try:
                    scan(target_ips, arpsweep_address(tcpsweep(synscan())))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, arpsweep_address(tcpsweep(None)))
                except KeyboardInterrupt:
                    sys.exit()
        else:
            if is_synscan:
                try:
                    scan(target_ips, arpsweep_address(synscan()))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, arpsweep_address(None))
                except KeyboardInterrupt:
                    sys.exit()
    
    # non-ARP scan
    if is_netrange:
        if is_pingsweep and not is_arpsweep:
            if is_synscan:
                try:
                    scan(target_ips, pingsweep(synscan()))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, pingsweep(None))
                except KeyboardInterrupt:
                    sys.exit()
        elif is_tcpsweep and not is_arpsweep:
            if is_synscan:
                try:
                    scan(target_ips, tcpsweep(synscan()))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan(target_ips, tcpsweep(None))
                except KeyboardInterrupt:
                    sys.exit()
    else:
        if is_pingsweep and not is_arpsweep:
            if is_synscan:
                try:
                    scan([target_ips], pingsweep(synscan()))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan([target_ips], pingsweep(None))
                except KeyboardInterrupt:
                    sys.exit()
        elif is_tcpsweep and not is_arpsweep:
            if is_synscan:
                try:
                    scan([target_ips], tcpsweep(synscan()))
                except KeyboardInterrupt:
                    sys.exit()
            else:
                try:
                    scan([target_ips], tcpsweep(None))
                except KeyboardInterrupt:
                    sys.exit()

if __name__ == "__main__":
    main(sys.argv[1:])
    reload(sys)
    sys.setdefaultencoding("utf-8")
