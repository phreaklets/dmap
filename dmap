#!/usr/bin/env python
# -*- coding: utf-8 -*-

# d(dramallama)map - a minimalist network scanner - (C) 2015 Richard Gold

# must run as root for access to privileged functions (raw packets)
"""D(dramallama)map
Usage:
  dmap <iprange>
  dmap [-a] ([-p]|[-t]) [--syn=<type>] [--interface=<iface>] <iprange>

Options:
  -h --help     Show this screen.
  --version     Show version.
  -a --arp      Perform ARP sweep
  -p --ping     Perform ICMP ping sweep
  -t --tcp      Perform TCP ping sweep
  --interface=<iface>      Perform TCP ping sweep [default: eth0].
  --syn=<type>  Perform TCP SYN port scan [default: top].
"""
from docopt import docopt
import pprint
import sys
from netaddr import IPNetwork, IPAddress
from clint.textui import progress
import logging
# turn off those irritating IPv6 warning messages
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import sr,srp,Ether,ARP,IP,ICMP,TCP,sr1,RandShort,conf #Import needed modules from scapy

interface = None

def coroutine(func):
    def start(*args,**kwargs):
        cr = func(*args,**kwargs)
        cr.next()
        return cr
    return start

@coroutine
def arpsweep(target):
    while True:
        netr = (yield)
        print "Starting ARP sweep"
        results = []
        for i in progress.bar(range(netr.size)):
            ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst = str(list(netr)[i])), timeout=0.1,iface=interface,inter=0.1)
            for snd,rcv in ans:
                #print rcv.sprintf(r"%Ether.src% - %ARP.psrc%")
                mac = rcv.sprintf(r"%Ether.src%")
                ip = rcv.sprintf(r"%ARP.psrc%")
                results.append([mac, ip])
        for result in results:
            print "MAC: %s IP: %s" % (result[0],result[1])
        target.send(results)

@coroutine
def pingsweep(target):
    while True:
        ips = (yield)
        print "Starting ICMP Ping sweep"
        results = []
        for i in progress.bar(range(len(ips))):
            ip = ips[i][1]
            ans,unans=sr(IP(dst=ip)/ICMP(),timeout=0.5)
            for snd,rcv in ans:
                results.append(rcv.sprintf("%IP.src%"))
        for result in results:
            print "Live IP: %s" % (result)
        target.send(results)

# @coroutine
# def tcpingsweep(target):
#     while True:
#         ips = (yield)
#         print "Starting TCP Ping sweep"
#         all_ips = {}
#         for ip in ips:
#             ans,unans=sr( IP(dst=ip)/TCP(dport=80,flags="S") )
#             for snd,rcv in ans:
#                 tmp_ip_address = (rcv.sprintf("%IP.src%"))
#                 if (IPAddress(tmp_ip_address).is_unicast()):
#                         all_ips.append([tmp_ip_address])
#         print all_ips


@coroutine
def synsweep():
    #ports = "7,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,990,993,995,1025,1026,1027,1028,1029,1110,1433,1720,1723,1755,1900,2000,2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,32768,49152,49153,49154,49155,49156,49157"
    ports = "21,22,23,80,139,443,445"
    port_list = ports.split(",")

    while True:
        ips = (yield)
        print "Starting TCP SYN port scan"
        all_ips_ports = {}
        for i in progress.bar(range(len(ips))):
            dst_ip = ips[i]
            for dst_port in port_list:
                src_port = RandShort()
                stealth_scan_resp = sr1(IP(dst=dst_ip)/TCP(sport=src_port,dport=int(dst_port),flags="S"),timeout=1)
                if(str(type(stealth_scan_resp))=="<type 'NoneType'>"):
                    pass
                elif(stealth_scan_resp.haslayer(TCP)):
                    if(stealth_scan_resp.getlayer(TCP).flags == 0x12):
                        tmp_ip_address = (stealth_scan_resp.sprintf("%IP.src%"))
                        if (IPAddress(tmp_ip_address).is_unicast()):
                            if tmp_ip_address in all_ips_ports:
                                tmp_all_ips_ports = all_ips_ports[tmp_ip_address]
                                tmp_all_ips_ports.append(int(dst_port))
                            else:
                                tmp_list = []
                                tmp_list.append([tmp_ip_address, [int(dst_port)]])
                                all_ips_ports.update(tmp_list)
                    elif (stealth_scan_resp.getlayer(TCP).flags == 0x14):
                        pass
                elif(stealth_scan_resp.haslayer(ICMP)):
                    if(int(stealth_scan_resp.getlayer(ICMP).type)==3 and int(stealth_scan_resp.getlayer(ICMP).code) in [1,2,3,9,10,13]):
                        pass
        pprint.pprint(all_ips_ports)

def scan(netr, target):
    target.send(netr)

def main(argv):
    global interface 
    interface = "eth0"
    ips = "192.168.42.0/24"
    netr = IPNetwork(ips)
    conf.verb = 0 #Actually start scanning

    # if target net range is in our LAN broadcast domain, we can do an ARP sweep
    scan(netr, arpsweep(pingsweep(synsweep())))
    # else we'll need to do a ICMP ping sweep
    #scan(netr, pingsweep(synsweep()))

if __name__ == "__main__":
    arguments = docopt(__doc__, version='D(dramallama)map 0.1')
    print(arguments)
    main(sys.argv[1:])
    reload(sys)
    sys.setdefaultencoding("utf-8")
